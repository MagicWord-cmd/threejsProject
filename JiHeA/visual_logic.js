/**
 * Generated by Verge3D Puzzles v.3.7.1
 * Thu Sep 23 2021 13:31:23 GMT+0800 (中国标准时间)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {
  setHTMLElemStyle('display', 'none', 'div_ui', true);
})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemStyle('display', '', 'div_preloader', true);
  if (Math.round(_initGlob.percentage) < 30) {
    setHTMLElemAttribute('innerHTML', 'Loading models...', 'div_percentage', true);
  } else if (Math.round(_initGlob.percentage) < 90) {
    setHTMLElemAttribute('innerHTML', 'Preparing scene...', 'div_percentage', true);
  } else if (Math.round(_initGlob.percentage) >= 90) {
    setHTMLElemAttribute('innerHTML', 'Loading textures...', 'div_percentage', true);
    registerSetTimeout(2, function() {
      setHTMLElemAttribute('innerHTML', 'Compiling shaders...', 'div_percentage', true);
      registerSetTimeout(2, function() {
        setHTMLElemAttribute('innerHTML', 'Please wait...', 'div_percentage', true);
      });
    });
  }
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'div_preloader', true);
  setHTMLElemStyle('display', '', 'div_ui', true);
  setHTMLElemStyle('display', 'none', 'Color01Text', true);
  setHTMLElemStyle('display', 'none', 'Color02Text', true);
  setHTMLElemStyle('display', 'none', 'Color03Text', true);
  setHTMLElemStyle('display', 'none', 'LG01Text', true);
  setHTMLElemStyle('display', 'none', 'LG02Text', true);
  setHTMLElemStyle('display', 'none', 'LG03Text', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var LG01, LT, ClickedCount01, LG02, flag01, LG03, ClickedCount02, flag02, flag03, flag04, AnnotationList, flag05, ClickedCount03;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                obj.remove(child);
                appInstance.container.removeChild(child.annotation);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = annot;
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}



function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



eventHTMLElem('mouseover', 'Color01', true, function(event) {
  setHTMLElemStyle('cursor', 'pointer', 'Color01', true);
  setHTMLElemStyle('display', '', 'Color01Text', true);
});
eventHTMLElem('mouseout', 'Color01', true, function(event) {
  setHTMLElemStyle('cursor', 'default', 'Color01', true);
  setHTMLElemStyle('display', 'none', 'Color01Text', true);
});
eventHTMLElem('mouseover', 'Color02', true, function(event) {
  setHTMLElemStyle('cursor', 'pointer', 'Color02', true);
  setHTMLElemStyle('display', '', 'Color02Text', true);
});
eventHTMLElem('mouseout', 'Color02', true, function(event) {
  setHTMLElemStyle('cursor', 'default', 'Color02', true);
  setHTMLElemStyle('display', 'none', 'Color02Text', true);
});
eventHTMLElem('mouseover', 'Color03', true, function(event) {
  setHTMLElemStyle('cursor', 'pointer', 'Color03', true);
  setHTMLElemStyle('display', '', 'Color03Text', true);
});
eventHTMLElem('mouseout', 'Color03', true, function(event) {
  setHTMLElemStyle('cursor', 'default', 'Color03', true);
  setHTMLElemStyle('display', 'none', 'Color03Text', true);
});
eventHTMLElem('mouseover', 'LG01', true, function(event) {
  setHTMLElemStyle('cursor', 'pointer', 'LG01', true);
  setHTMLElemStyle('display', '', 'LG01Text', true);
});
eventHTMLElem('mouseout', 'LG01', true, function(event) {
  setHTMLElemStyle('cursor', 'default', 'LG01', true);
  setHTMLElemStyle('display', 'none', 'LG01Text', true);
});
eventHTMLElem('mouseover', 'LG02', true, function(event) {
  setHTMLElemStyle('cursor', 'pointer', 'LG02', true);
  setHTMLElemStyle('display', '', 'LG02Text', true);
});
eventHTMLElem('mouseout', 'LG02', true, function(event) {
  setHTMLElemStyle('cursor', 'default', 'LG02', true);
  setHTMLElemStyle('display', 'none', 'LG02Text', true);
});
eventHTMLElem('mouseover', 'LG03', true, function(event) {
  setHTMLElemStyle('cursor', 'pointer', 'LG03', true);
  setHTMLElemStyle('display', '', 'LG03Text', true);
});
eventHTMLElem('mouseout', 'LG03', true, function(event) {
  setHTMLElemStyle('cursor', 'default', 'LG03', true);
  setHTMLElemStyle('display', 'none', 'LG03Text', true);
});

registerOnHover('trigger_engine_swithcer', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('trigger_engine_swithcer', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('trigger_engine_swithcer', 'DISABLE');
});
registerOnHover('trigger_front_lights', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('trigger_front_lights', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('trigger_front_lights', 'DISABLE');
});
registerOnHover('trigger_horn', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('trigger_horn', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('trigger_horn', 'DISABLE');
});
registerOnHover('trigger_side_footboard', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('trigger_side_footboard', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('trigger_side_footboard', 'DISABLE');
});
registerOnHover('Door.001', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('Door.001', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('Door.001', 'DISABLE');
});
registerOnHover('Door.002', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('Door.002', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('Door.002', 'DISABLE');
});
registerOnHover('Door.003', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('Door.003', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('Door.003', 'DISABLE');
});
registerOnHover('Door.004', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('Door.004', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('Door.004', 'DISABLE');
});
registerOnHover('Door.005', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
  outline('Door.005', 'ENABLE');
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
  outline('Door.005', 'DISABLE');
});

LG01 = ['LG01.001', 'LG01.002', 'LG01.003', 'LG01.004'];
LG02 = ['LG02.001', 'LG02.002', 'LG02.003', 'LG02.004'];
LG03 = ['LG03.001', 'LG03.002', 'LG03.003', 'LG03.004'];
changeVis(LG02, false);
changeVis(LG03, false);
eventHTMLElem('click', 'LG01', true, function(event) {
  changeVis(LG02, false);
  changeVis(LG03, false);
  changeVis(LG01, true);
});
eventHTMLElem('click', 'LG02', true, function(event) {
  changeVis(LG01, false);
  changeVis(LG03, false);
  changeVis(LG02, true);
});
eventHTMLElem('click', 'LG03', true, function(event) {
  changeVis(LG01, false);
  changeVis(LG02, false);
  changeVis(LG03, true);
});

LT = ['LT.001', 'LT.002', 'LT.003', 'LT.004', LG01, LG02, LG03];
flag01 = true;
registerOnClick('Door.001', false, false, [0], function() {
  if (flag01) {

    operateAnimation('PLAY', 'Door.001', 0, 50, 'LoopOnce', 2,
            function() {
      flag01 = false;
    }, undefined, false);

        } else {

    operateAnimation('PLAY', 'Door.001', 0, 50, 'LoopOnce', 2,
            function() {
      flag01 = true;
    }, undefined, true);

        }
}, function() {});
flag02 = true;
registerOnClick('Door.002', false, false, [0], function() {
  if (flag02) {

    operateAnimation('PLAY', 'Door.002', 0, 50, 'LoopOnce', 2,
            function() {
      flag02 = false;
    }, undefined, false);

        } else {

    operateAnimation('PLAY', 'Door.002', 0, 50, 'LoopOnce', 2,
            function() {
      flag02 = true;
    }, undefined, true);

        }
}, function() {});
flag03 = true;
registerOnClick('Door.003', false, false, [0], function() {
  if (flag03) {

    operateAnimation('PLAY', 'Door.003', 0, 50, 'LoopOnce', 2,
            function() {
      flag03 = false;
    }, undefined, false);

        } else {

    operateAnimation('PLAY', 'Door.003', 0, 50, 'LoopOnce', 2,
            function() {
      flag03 = true;
    }, undefined, true);

        }
}, function() {});
flag04 = true;
registerOnClick('Door.004', false, false, [0], function() {
  if (flag04) {

    operateAnimation('PLAY', 'Door.004', 0, 50, 'LoopOnce', 2,
            function() {
      flag04 = false;
    }, undefined, false);

        } else {

    operateAnimation('PLAY', 'Door.004', 0, 50, 'LoopOnce', 2,
            function() {
      flag04 = true;
    }, undefined, true);

        }
}, function() {});
flag05 = true;
registerOnClick('Door.005', false, false, [0], function() {
  if (flag05) {

    operateAnimation('PLAY', 'Door.005', 0, 50, 'LoopOnce', 2,
            function() {
      flag05 = false;
    }, undefined, false);

        } else {

    operateAnimation('PLAY', 'Door.005', 0, 50, 'LoopOnce', 2,
            function() {
      flag05 = true;
    }, undefined, true);

        }
}, function() {});

ClickedCount01 = 2;
registerOnClick('trigger_engine_swithcer', false, false, [0,1,2], function() {
  if (ClickedCount01 % 2 == 0) {

    operateAnimation('PLAY', LT, 0, 50, 'LoopRepeat', 2,
            function() {}, undefined, false);

        } else if (ClickedCount01 % 2 == 1) {

    operateAnimation('STOP', LT, null, null, 'AUTO', 1,
            function() {}, undefined, false);

        }
  ClickedCount01 = ClickedCount01 + 1;
}, function() {});
ClickedCount02 = 2;
registerOnClick('trigger_front_lights', false, false, [0,1,2], function() {
  if (ClickedCount02 % 2 == 0) {
    bloom(5, 0.25, 0.2);
    setMaterialValue('light01', 'Value', 50);
    setMaterialValue('light02', 'Value', 50);
  } else if (ClickedCount02 % 2 == 1) {
    setMaterialValue('light01', 'Value', 0);
    setMaterialValue('light02', 'Value', 0);
  }
  ClickedCount02 = ClickedCount02 + 1;
}, function() {});
handleAnnot(true, '1', 'Empty_Door01', '全自动感应车门', 'poi1');
handleAnnot(true, '2', 'Empty_Door05', '大容量尾箱', 'poi2');
handleAnnot(true, '3', 'Empty_CS:JiaYouKou', '加油口', 'poi3');
handleAnnot(true, '4', 'Empty_CS:CongDianKou', '充电口', 'poi4');
AnnotationList = ['poi1', 'poi2', 'poi3', 'poi4'];
ClickedCount03 = 1;
registerOnClick('trigger_side_footboard', false, false, [0,1,2], function() {
  if (ClickedCount03 % 2 == 0) {
    setHTMLElemStyle('display', '', AnnotationList, false);
  } else if (ClickedCount03 % 2 == 1) {
    setHTMLElemStyle('display', 'none', AnnotationList, false);
  }
  ClickedCount03 = ClickedCount03 + 1;
}, function() {});

eventHTMLElem('click', 'Color01', true, function(event) {
  setMaterialColor('001_CheShen', 'RGB', 0.45, 0.5, 0.5, '');
});
eventHTMLElem('click', 'Color02', true, function(event) {
  setMaterialColor('001_CheShen', 'RGB', 0.05, 0.05, 0.7, '');
});
eventHTMLElem('click', 'Color03', true, function(event) {
  setMaterialColor('001_CheShen', 'RGB', 0.7, 0.01, 0.01, '');
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
